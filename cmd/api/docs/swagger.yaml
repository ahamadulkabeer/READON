definitions:
  domain.Category:
    properties:
      categoryID:
        type: integer
      id:
        type: integer
      name:
        type: string
    type: object
  domain.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      permission:
        type: boolean
      premium:
        type: boolean
    required:
    - email
    - name
    - password
    type: object
  handler.Otp:
    properties:
      email:
        type: string
      otp:
        type: string
    type: object
  models.Admin:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  models.BooksListResponse:
    properties:
      filter:
        type: integer
      lastpage:
        type: integer
      list:
        items:
          $ref: '#/definitions/models.ListingBook'
        type: array
      page:
        type: integer
      search:
        type: string
      size:
        type: integer
    type: object
  models.ErrorResponse:
    properties:
      err:
        type: string
      hint:
        type: string
      status:
        type: string
    type: object
  models.ListingBook:
    properties:
      author:
        type: string
      id:
        type: integer
      rating:
        type: number
      title:
        type: string
    type: object
  models.Newcategory:
    properties:
      name:
        type: string
    type: object
  models.Product:
    properties:
      about:
        type: string
      author:
        type: string
      category:
        type: integer
      image:
        items:
          type: integer
        type: array
      name:
        type: string
    type: object
  models.SignupData:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  models.UselistResponse:
    properties:
      filter:
        type: integer
      lastpage:
        type: integer
      list:
        items:
          $ref: '#/definitions/domain.User'
        type: array
      page:
        type: integer
      search:
        type: string
      size:
        type: integer
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      permission:
        type: boolean
    type: object
  models.Userlogindata:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
info:
  contact: {}
paths:
  /admin/addcategory:
    post:
      consumes:
      - application/json
      description: Add a new category with the provided name , no duplicate allowed
      parameters:
      - description: New category information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Newcategory'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added new category
          schema:
            type: string
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: InternalServerError
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Add a new category
      tags:
      - categories
  /admin/addproduct:
    post:
      consumes:
      - multipart/form-data
      description: Add a new product with its details and an associated image
      parameters:
      - description: Product name
        in: formData
        name: name
        required: true
        type: string
      - description: Product author
        in: formData
        name: author
        required: true
        type: string
      - description: Product description
        in: formData
        name: about
        required: true
        type: string
      - description: Product category ID
        in: formData
        name: category
        required: true
        type: integer
      - description: Product image
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Product added with image
          schema:
            type: string
        "400":
          description: Invalid request or form data
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Error while adding product or image
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Add a new product with an image
      tags:
      - product
  /admin/admins:
    get:
      description: Get a list of Admins
      produces:
      - application/json
      responses:
        "200":
          description: List of Admins
          schema:
            items:
              $ref: '#/definitions/models.Admin'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: List Admins
      tags:
      - Admin
  /admin/blockuser/{id}:
    put:
      description: Block or unblock a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User is blocked/unblocked successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Block or unblock user by ID
      tags:
      - Admin
  /admin/categorylist:
    get:
      consumes:
      - application/json
      description: Get a list of categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Category'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Lists all the categories
      tags:
      - categories
  /admin/deletebook/{id}:
    delete:
      description: Get details of a product using its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid product ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get details of a specific product
      tags:
      - product
  /admin/deletecategory/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing category with the provided ID
      parameters:
      - description: Category ID to delete
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted category
          schema:
            type: string
        "400":
          description: Cannot parse category_id
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Delete failed" or "Please try again
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a category
      tags:
      - categories
  /admin/updatecategory/{id}:
    put:
      consumes:
      - application/json
      description: Update an existing category of provided ID with new category
      parameters:
      - description: Category ID to update
        in: path
        name: id
        required: true
        type: integer
      - description: New category information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Newcategory'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated category
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a category
      tags:
      - categories
  /admin/user/{id}:
    delete:
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User is deleted successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete user by ID
      tags:
      - Admin
    get:
      description: Get a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Find user by ID
      tags:
      - Admin
  /admin/users:
    get:
      description: |-
        Lists all users from the database.
        jwt temp:  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwicm9sZSI6ImFkbWluIn0.bw-k7fjfW6nY9DIBZ46ZcJG0IdaYclwHW7P7IPwuNoQ
      parameters:
      - description: 'Page number for pagination (default: 1)'
        in: query
        name: page
        type: integer
      - description: Search word if any
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UselistResponse'
        "400":
          description: BadRequest
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: InternalServerError
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      - Cookie: []
      summary: Get all users
      tags:
      - Admin
  /adminlogin:
    get:
      description: Get the HTML page for admin login
      produces:
      - text/html
      responses:
        "200":
          description: 'got html page: login as admin'
          schema:
            type: string
      summary: Get login page for admin
      tags:
      - Admin
    post:
      consumes:
      - application/json
      description: Login as an admin
      parameters:
      - description: Admin credentials
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/models.Userlogindata'
      produces:
      - application/json
      responses:
        "200":
          description: logged in TOKEN_STRING
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Admin Login
      tags:
      - Admin
  /login:
    get:
      description: Retrieve the HTML page for user login.
      produces:
      - application/json
      responses:
        "200":
          description: Got HTML page for user login
          schema:
            type: string
      summary: Get HTML page for user login
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Log in a user and return a token if successful.
      parameters:
      - description: User login data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Userlogindata'
      produces:
      - application/json
      responses:
        "200":
          description: 'succesfully logged in  + tokenstring '
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: User login
      tags:
      - users
  /otplogin:
    get:
      description: Retrieve the HTML page for OTP login.
      produces:
      - application/json
      responses:
        "200":
          description: Got HTML page for OTP login, enter email
          schema:
            type: string
      summary: Get HTML page for OTP login
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Verify the provided email and send an OTP.
      parameters:
      - description: User email to verify and send OTP
        in: body
        name: email
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Email verified, OTP sent  + Email
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Verify email and send OTP
      tags:
      - users
  /signup:
    get:
      description: Retrieve the HTML page for user signup.
      produces:
      - text/html
      responses:
        "200":
          description: Successfully got the HTML page
          schema:
            type: string
      summary: Get HTML page for user signup
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Save a user by providing JSON payload
      operationId: SaveUser
      parameters:
      - description: User object to be saved
        in: body
        name: usersdata
        required: true
        schema:
          $ref: '#/definitions/models.SignupData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: InternalServerError
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Save a user
      tags:
      - users
  /user/account/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user account by providing the user ID
      parameters:
      - description: User ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User is deleted successfully || Redirected to login page
          schema:
            type: string
        "400":
          description: Bad Request, couldn't parse id
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Couldn't delete user
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a user account
      tags:
      - users
  /user/books:
    get:
      description: Get a list of products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: List products
      tags:
      - product
  /user/home:
    get:
      description: Retrieve the user home page.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully got the user home page
          schema:
            type: string
      summary: Get user home page
      tags:
      - users
  /user/listbooks:
    post:
      description: Get a list of products with pagination details for user side
      parameters:
      - description: 'Page number for pagination (default: 1)'
        in: query
        name: page
        type: integer
      - description: Sort order for products (e.g., name ASC, price DESC)
        in: query
        name: filter
        type: integer
      - description: Search keyword for products
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BooksListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: List, search, and explore products for a user
      tags:
      - product
  /user/profile/{id}:
    get:
      consumes:
      - application/json
      description: Get user profile information by providing the user ID
      parameters:
      - description: User ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request, couldn't parse id
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Couldn't get user profile
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get user profile
      tags:
      - users
  /verifyotp:
    post:
      consumes:
      - application/json
      description: Verify the provided OTP.
      parameters:
      - description: OTP data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.Otp'
      produces:
      - application/json
      responses:
        "200":
          description: OTP verified, redirected to home page
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized OTP
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Verify OTP
      tags:
      - users
swagger: "2.0"
