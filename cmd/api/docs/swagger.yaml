definitions:
  models.ListAddress:
    properties:
      city:
        type: string
      country:
        type: string
      district:
        type: string
      houseName:
        type: string
      houseNo:
        type: string
      id:
        type: integer
      landmark:
        type: string
      mobile:
        type: string
      name:
        type: string
      pincode:
        type: string
      place:
        type: string
    type: object
  models.ListCart:
    properties:
      items:
        items:
          $ref: '#/definitions/models.ListCartItem'
        type: array
      totalPrice:
        type: number
      totalQuantity:
        type: integer
    type: object
  models.ListCartItem:
    properties:
      book:
        $ref: '#/definitions/models.ListingBook'
      bookId:
        type: integer
      id:
        type: integer
      price:
        type: number
      quantity:
        type: integer
      totalPrice:
        type: number
    type: object
  models.ListCategories:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.ListCoupons:
    properties:
      applicableCategory:
        type: string
      applicableOn:
        type: string
      applicableProduct:
        type: string
      description:
        type: string
      discountAmount:
        type: integer
      discountType:
        type: string
      expired:
        type: boolean
      id:
        type: integer
      isBound:
        type: boolean
      limited:
        type: boolean
      maxQuantity:
        type: integer
      name:
        type: string
      prefix:
        type: string
      validFrom:
        type: string
      validTill:
        type: string
    type: object
  models.ListUserCoupons:
    properties:
      coupon:
        $ref: '#/definitions/models.ListCoupons'
      couponCode:
        type: string
      redeemed:
        type: boolean
      redeemedOn:
        type: integer
    type: object
  models.ListingBook:
    properties:
      about:
        type: string
      author:
        type: string
      category:
        $ref: '#/definitions/models.ListCategories'
      id:
        type: integer
      image:
        items:
          type: integer
        type: array
      premium:
        type: boolean
      price:
        type: number
      rating:
        type: number
      title:
        type: string
    type: object
  models.PaginatedListCoupons:
    properties:
      coupons:
        items:
          $ref: '#/definitions/models.ListCoupons'
        type: array
      pagination:
        $ref: '#/definitions/models.Pagination'
    type: object
  models.Pagination:
    properties:
      filter:
        type: integer
      lastpage:
        type: integer
      offset:
        type: integer
      page:
        type: integer
      search:
        type: string
      size:
        type: integer
    type: object
  models.SignupData:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      permission:
        type: boolean
    type: object
  models.UserDataError:
    properties:
      emailErr:
        type: string
      generalErr:
        type: string
      passwordErr:
        type: string
      userNameErr:
        type: string
    type: object
  responses.Response:
    properties:
      data: {}
      error: {}
      message:
        type: string
      statusCode:
        type: integer
    type: object
info:
  contact: {}
paths:
  /cart:
    delete:
      consumes:
      - application/json
      description: Remove an item from the user's cart
      parameters:
      - description: Book ID
        in: query
        name: bookId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Item removed from the cart
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.ListCart'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Delete item from cart
      tags:
      - Cart
    get:
      consumes:
      - application/json
      description: Retrieve the items in the user's cart
      produces:
      - application/json
      responses:
        "200":
          description: Cart fetched successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.ListCart'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Get user's cart
      tags:
      - Cart
    post:
      consumes:
      - application/json
      description: Adds a book to the user's cart. If the book is already in the cart,
        increments the quantity by 1.
      parameters:
      - description: Book ID
        in: query
        name: bookId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Item added to cart
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.ListCartItem'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                error:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                error:
                  type: string
              type: object
      summary: Add item to cart
      tags:
      - Cart
    put:
      consumes:
      - application/json
      description: Updates the quantity of a book in the user's cart. If the new quantity
        is less than 1, removes the item from the cart.
      parameters:
      - description: Book ID
        in: query
        name: bookId
        required: true
        type: integer
      - description: New Quantity
        in: query
        name: quantity
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Item quantity updated
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.ListCartItem'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                error:
                  type: string
              type: object
        "404":
          description: Item not found
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                error:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                error:
                  type: string
              type: object
      summary: Update quantity of an item in the cart
      tags:
      - Cart
  /coupons:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of all coupons .Admin Authentication
        required.
      parameters:
      - in: query
        name: filter
        type: integer
      - in: query
        name: lastpage
        type: integer
      - in: query
        name: offset
        type: integer
      - in: query
        name: page
        type: integer
      - in: query
        name: search
        type: string
      - in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Coupons successfully retrieved
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.PaginatedListCoupons'
              type: object
        "404":
          description: Coupons not found
          schema:
            $ref: '#/definitions/responses.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: List all coupons
      tags:
      - Coupon
  /login:
    get:
      description: Retrieves the login page.
      produces:
      - application/json
      responses:
        "200":
          description: login in page received
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Get the login page
      tags:
      - Signup&Login
    post:
      consumes:
      - application/json
      description: Log in a user with email and password.sets cookie valid for 24
        hrs.
      parameters:
      - in: formData
        name: email
        type: string
      - in: formData
        name: password
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User logged in
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: User login
      tags:
      - Signup&Login
  /signup:
    get:
      description: Retrieves the signup page.
      produces:
      - application/json
      responses:
        "200":
          description: Sign up page received
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Get the signup page
      tags:
      - Signup&Login
    post:
      consumes:
      - application/json
      description: Save a new user to the system. Validates user data, checks for
        existing email, and hashes the password.
      parameters:
      - in: formData
        name: email
        type: string
      - in: formData
        name: name
        type: string
      - in: formData
        name: password
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.SignupData'
                error:
                  $ref: '#/definitions/models.UserDataError'
              type: object
        "422":
          description: Unprocessable Entity
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.SignupData'
                error:
                  $ref: '#/definitions/models.UserDataError'
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.SignupData'
                error:
                  $ref: '#/definitions/models.UserDataError'
              type: object
      summary: Save a new user
      tags:
      - Signup&Login
  /user/addresses:
    get:
      description: Retrieve a list of addresses associated with the authenticated
        user. Requires user authentication.
      produces:
      - application/json
      responses:
        "200":
          description: Addresses Retrieved
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.ListAddress'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: List all addresses for a user.
      tags:
      - Address
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Add a new address to the system. Requires user authentication and
        a valid address payload.
      parameters:
      - in: formData
        name: city
        type: string
      - in: formData
        name: country
        type: string
      - in: formData
        name: district
        type: string
      - in: formData
        name: houseName
        type: string
      - in: formData
        name: houseNo
        type: string
      - in: formData
        name: landmark
        type: string
      - in: formData
        name: mobile
        type: string
      - in: formData
        name: name
        type: string
      - in: formData
        name: pincode
        type: string
      - in: formData
        name: place
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.ListAddress'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Add a new address
      tags:
      - Address
  /user/addresses/{addressId}:
    delete:
      description: Delete an address from the system. Requires user authentication.
        The address must exist and belong to the authenticated user.
      parameters:
      - description: Address ID
        in: path
        name: addressId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Address Deleted
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Delete an address
      tags:
      - Address
    get:
      description: Retrieve an address from the system. Requires user authentication.
        The address must exist and belong to the authenticated user.
      parameters:
      - description: Address ID
        in: path
        name: addressId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Address Retrieved
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.ListAddress'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Get an address
      tags:
      - Address
    put:
      consumes:
      - application/x-www-form-urlencoded
      description: Update an address in the system. Requires user authentication and
        a valid address payload. The address must exist and belong to the authenticated
        user.
      parameters:
      - description: Address ID
        in: path
        name: addressId
        required: true
        type: integer
      - in: formData
        name: city
        type: string
      - in: formData
        name: country
        type: string
      - in: formData
        name: district
        type: string
      - in: formData
        name: houseName
        type: string
      - in: formData
        name: houseNo
        type: string
      - in: formData
        name: landmark
        type: string
      - in: formData
        name: mobile
        type: string
      - in: formData
        name: name
        type: string
      - in: formData
        name: pincode
        type: string
      - in: formData
        name: place
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Address Updated
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.ListAddress'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Update an existing address
      tags:
      - Address
  /user/coupons:
    get:
      consumes:
      - application/json
      description: Retrieve a list of coupons for a specific user. User authentication
        required.
      produces:
      - application/json
      responses:
        "200":
          description: Coupons successfully retrieved
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.ListUserCoupons'
                  type: array
              type: object
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/responses.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: List user's coupons
      tags:
      - Coupon
  /user/delete:
    delete:
      consumes:
      - application/json
      description: Deletes the account of the logged-in user. User authentication
        required.
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                error:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                error:
                  type: string
              type: object
      summary: Delete user account
      tags:
      - User
  /user/profile:
    get:
      consumes:
      - application/json
      description: Fetch the user profile data for the logged-in user.User authentication
        required.
      produces:
      - application/json
      responses:
        "200":
          description: User profile fetched
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                error:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                error:
                  type: string
              type: object
      summary: Get user profile
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update user details with the given data.user authentication required.
      parameters:
      - in: formData
        name: id
        type: integer
      - in: formData
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details updated
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Update user details
      tags:
      - User
swagger: "2.0"
